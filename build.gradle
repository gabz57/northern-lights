import org.springframework.boot.gradle.plugin.SpringBootPlugin
//import org.springframework.cloud.contract.verifier.plugin.SpringCloudContractVerifierGradlePlugin

import static org.owasp.dependencycheck.reporting.ReportGenerator.Format

buildscript {
    ext {
        logstashLogbackEncoderVersion = "6.4"
        logbackJsonClassicVersion = "0.1.5"
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:6.2.2"
    }
}

plugins {
    id 'idea'
    // select the tag to show dependencies versions
    // https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-dependencies/build.gradle
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.5.2' apply false
    id 'org.springframework.experimental.aot' version '0.10.1-SNAPSHOT' apply false
    id 'org.graalvm.buildtools.native' version '0.9.0' apply false
    id 'com.github.johnrengelman.processes' version '0.5.0' apply false
    id 'org.springdoc.openapi-gradle-plugin' version '1.3.2' apply false
}

idea {
    module {
        testSourceDirs += file("src/integrationTest/java")
        testResourceDirs += file("src/integrationTest/resources")
        testSourceDirs += file("src/e2eTest/java")
        testResourceDirs += file("src/e2eTest/resources")
    }
}
repositories {
//    jcenter()
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}


wrapper {
    gradleVersion = "7.1.1"
}

apply plugin: 'org.owasp.dependencycheck'

dependencyCheck {
    failBuildOnCVSS = 0
    suppressionFile = 'gradle/owasp-suppressions.xml'
    formats = [Format.XML, Format.HTML]
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
}

allprojects { project ->

    plugins.withType(JavaPlugin).whenPluginAdded {
        // do Java specific configurations
        project.apply plugin: 'io.spring.dependency-management'
        project.apply plugin: 'idea'
        project.apply plugin: 'java-test-fixtures'
        project.apply plugin: 'java-library'
        project.apply plugin: 'jacoco'

        jar.enabled = true

        group = 'io.northern-lights'
        version = '0.0.1-SNAPSHOT'
        sourceCompatibility = '16'

        repositories {
            mavenCentral()
            maven { url 'https://repo.spring.io/milestone' }
            maven { url 'https://repo.spring.io/snapshot' }
        }

        dependencyManagement {
            imports {
                mavenBom SpringBootPlugin.BOM_COORDINATES
//                mavenBom "org.springframework.cloud:spring-cloud-contract-dependencies:${GAVerifierVersion}"
            }
        }

        configurations {
            compileOnly {
                extendsFrom annotationProcessor
            }
        }

        dependencies {
            compileOnly "org.projectlombok:lombok"
            annotationProcessor "org.projectlombok:lombok"

            implementation "org.slf4j:slf4j-api"
            implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"
            implementation "ch.qos.logback:logback-classic"
            implementation "ch.qos.logback.contrib:logback-json-classic:${logbackJsonClassicVersion}"
            implementation "ch.qos.logback.contrib:logback-jackson:${logbackJsonClassicVersion}"

            // https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing
            testImplementation("org.springframework.boot:spring-boot-starter-test") {
                exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            }
            testImplementation "org.junit.jupiter:junit-jupiter-api"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
            testImplementation "org.mockito:mockito-junit-jupiter"

            testCompileOnly "org.projectlombok:lombok"
            testAnnotationProcessor "org.projectlombok:lombok"
//            testImplementation "org.slf4j:slf4j-api"

            // no value, only to avoid a specific warning logs during build
            implementation 'com.google.code.findbugs:annotations:3.0.1u2'
        }

        compileJava.dependsOn(processResources)

        sourceSets {
            integrationTest {
                compileClasspath += sourceSets.main.output
                runtimeClasspath += sourceSets.main.output
            }
        }

        configurations {
            integrationTestImplementation.extendsFrom testImplementation
            integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
        }

        compileJava {
            options.compilerArgs << '-Xlint:unchecked'
        }

        compileTestJava {
            options.compilerArgs << '-Xlint:unchecked'
        }

        test {
//            minHeapSize = "128m"
//            maxHeapSize = "6096m"
            group = LifecycleBasePlugin.VERIFICATION_GROUP
            description = "Runs the unit tests."
            useJUnitPlatform()

            testLogging {
                showStandardStreams = true
                events = ["failed", "skipped"]
                exceptionFormat "full"
            }
        }

        task integrationTest(type: Test) {
//            maxHeapSize = "256m"
            group = LifecycleBasePlugin.VERIFICATION_GROUP
            description = 'Runs the integration tests.'
            useJUnitPlatform()

            testClassesDirs = sourceSets.integrationTest.output.classesDirs
            classpath = sourceSets.integrationTest.runtimeClasspath

            shouldRunAfter test
        }

        check.dependsOn test
        check.dependsOn integrationTest
        check.finalizedBy jacocoTestReport

        jacocoTestReport {
            executionData.setFrom fileTree('.').include("**/build/jacoco/*.exec")
            reports {
                xml.enabled true
                html.enabled true
                csv.enabled false
            }
        }
    }

    plugins.withType(JavaTestFixturesPlugin).whenPluginAdded {
        test {
            // Issue when using spring boot plugin with java-test-fixtures plugin
            // https://github.com/gradle/gradle/issues/11696
            // Make sure the classes dir is used on the test classpath.
            // When test fixtures are involved, the JAR is used by default
            classpath = sourceSets.main.output.classesDirs + classpath - files(jar.archiveFile)
        }
        dependencies {
            testFixturesCompileOnly "org.projectlombok:lombok"
            testFixturesAnnotationProcessor "org.projectlombok:lombok"
            testFixturesImplementation "org.slf4j:slf4j-api"

//            testFixturesImplementation "org.mockito:mockito-junit-jupiter"

            // no value, only to avoid a specific warning logs during build
            testFixturesImplementation 'com.google.code.findbugs:annotations:3.0.1u2'
        }
    }
//
//    plugins.withType(SpringCloudContractVerifierGradlePlugin).whenPluginAdded {
//        // do Spring Cloud Contract specific configurations
//        project.apply plugin: 'groovy'
//
//        dependencies {
//            testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
//
//            testImplementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
//            // example with adding Spock core and Spock Spring
//            //    testImplementation "org.spockframework:spock-core:${spockVersion}"
//            //    testImplementation "org.spockframework:spock-spring:${spockVersion}"
//        }
//
//        sourceSets {
//            integrationTest.java.srcDirs += new File(project.buildDir, "generated-test-source").toString()
//        }
//
//        compileTestGroovy.enabled = false
//    }

    plugins.withType(SpringBootPlugin).whenPluginAdded {
        // do Spring specific configurations
        dependencies {
            annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
//            developmentOnly "org.springframework.boot:spring-boot-devtools"
            //
            //            // https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html#boot-features-testing
            //            testImplementation("org.springframework.boot:spring-boot-starter-test") {
            //                exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            //            }
//            // Error with Spring Boot 2.4.0 and Spring Integration FTP (5.4.1)
//            // which loads commons-net:3.7 (broken version)
//            implementation "commons-net:commons-net:3.7.1"
        }

        sourceSets {
            e2eTest {
                compileClasspath += sourceSets.main.output
                runtimeClasspath += sourceSets.main.output
            }
        }

        configurations {
            e2eTestImplementation.extendsFrom testImplementation
            e2eTestRuntimeOnly.extendsFrom testRuntimeOnly
            e2eTestCompileOnly.extendsFrom testCompileOnly
            e2eTestAnnotationProcessor.extendsFrom testAnnotationProcessor
            runtimeClasspath {
                extendsFrom developmentOnly
            }
        }

        task e2eTest(type: Test) {
            group = LifecycleBasePlugin.VERIFICATION_GROUP
            description = 'Runs the end-to-end tests.'
            useJUnitPlatform()

            testClassesDirs = sourceSets.e2eTest.output.classesDirs
            classpath = sourceSets.e2eTest.runtimeClasspath

            shouldRunAfter integrationTest
        }
        check.dependsOn e2eTest
    }
}
